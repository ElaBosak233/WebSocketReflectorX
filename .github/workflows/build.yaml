---
#-------------------------------------------------------------------------------
# Workflow configuration
#-------------------------------------------------------------------------------

name: "Binary build on commit/pr"
on:
  release:
    types: [published]
  push:
    paths:
      - ".github/workflows/build.yaml"
      - "crates/"
      - "Cargo.toml"
  pull_request_review:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

#-------------------------------------------------------------------------------
# Workflow jobs
#-------------------------------------------------------------------------------

jobs:
  build-linux:
    name: "Build on Linux"
    runs-on: ubuntu-22.04
    steps:
      # Checkout repository (and submodules)
      - name: Checkout repository (and submodules)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      # Get current git tag version
      - name: Get git version
        id: git_tag_version
        run: |
          export BUILD_VERSION=$(git describe --tags --abbrev=0)
          echo "Build at version $BUILD_VERSION"
          echo "BUILD_VERSION=$BUILD_VERSION" >> $GITHUB_OUTPUT
      # Install dependencies (from package manager)
      - name: Install dependencies (from package manager)
        run: |
          sudo apt-get install libgl1-mesa-dev libxcb1-dev libxkbcommon-x11-dev libx11-xcb-dev libxcb-cursor0 libzstd-dev fuse libfuse-dev libwayland-dev -y;
          sudo apt-get install cmake ninja-build pkgconf libtool fish -y;
          sudo apt-get install musl-tools musl-dev -y;
          sudo apt-get install appstream -y;
      # Build application
      - name: Build application
        run: |
          rustup update stable && rustup default stable;
          cargo install cargo-bundle;
          cargo build --verbose --release --bins;
      - name: Build cli for musl
        run: |
          rustup target add x86_64-unknown-linux-musl;
          cargo build --release -p wsrx --target x86_64-unknown-linux-musl;
      # Deploy Glibc application
      - name: Compress Glibc Binaries
        run: tar --transform='s!.*/!!' -czvf wsrx-cli-linux-gnu-x86_64.tar.gz target/release/wsrx
      # Deploy musl application
      - name: Compress musl Binaries
        run: tar --transform='s!.*/!!' -czvf wsrx-cli-linux-musl-x86_64.tar.gz target/x86_64-unknown-linux-musl/release/wsrx
      # Build deb
      - name: Build Debian package
        run: cargo bundle --release
      # Build AppImage
      - name: Build AppImage
        run: |
          ./deployments/appimage.fish
      # Upload Glibc cli package
      - name: Upload Glibc cli package
        uses: actions/upload-artifact@v4
        with:
          name: wsrx-cli-${{steps.git_tag_version.outputs.BUILD_VERSION}}-linux-gnu-x86_64.tar.gz
          path: wsrx-cli-linux-gnu-x86_64.tar.gz
      # Upload musl cli package
      - name: Upload musl cli package
        uses: actions/upload-artifact@v4
        with:
          name: wsrx-cli-${{steps.git_tag_version.outputs.BUILD_VERSION}}-linux-musl-x86_64.tar.gz
          path: wsrx-cli-linux-musl-x86_64.tar.gz
      # Upload AppImage
      - name: Upload Debian package
        uses: actions/upload-artifact@v4
        with:
          name: WebSocketReflectorX-${{steps.git_tag_version.outputs.BUILD_VERSION}}-linux-gnu-x86_64.deb
          path: target/release/bundle/deb/wsrx-desktop_${{steps.git_tag_version.outputs.BUILD_VERSION}}_amd64.deb
      # Upload AppImage
      - name: Upload AppImage
        uses: actions/upload-artifact@v4
        with:
          name: WebSocketReflectorX-${{steps.git_tag_version.outputs.BUILD_VERSION}}-linux-gnu-x86_64.AppImage
          path: WebSocketReflectorX-x86_64.AppImage
  build-windows:
    name: "Build on Windows"
    runs-on: windows-2022
    steps:
      # Checkout repository (and submodules)
      - name: Checkout repository (and submodules)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      # Get current git tag version
      - name: Get git version
        id: git_tag_version
        run: |
          echo BUILD_VERSION=$(git describe --tags --abbrev=0) >> $GITHUB_OUTPUT
      - name: Install NASM for aws-lc-rs on Windows
        uses: ilammy/setup-nasm@v1
      - name: Install ninja-build tool for aws-lc-fips-sys on Windows
        uses: seanmiddleditch/gha-setup-ninja@v5
      # Build application
      - name: Build application
        run: |
          rustup update stable && rustup default stable;
          cargo build --verbose --release --bins;
      # Compress cli binaries
      - name: Compress CLI Binaries
        run: 7z a wsrx-cli-windows-msvc-x86_64.zip target/release/wsrx.exe
        # Deploy application
      - name: Deploy application
        run: sh deployments/nsis.sh
      # Upload application ZIP
      - name: Upload application ZIP
        uses: actions/upload-artifact@v4
        with:
          name: wsrx-cli-${{steps.git_tag_version.outputs.BUILD_VERSION}}-windows-msvc-x86_64.zip
          path: wsrx-cli-windows-msvc-x86_64.zip
      # Upload NSIS installer
      - name: Upload NSIS installer
        uses: actions/upload-artifact@v4
        with:
          name: WebSocketReflectorX-${{steps.git_tag_version.outputs.BUILD_VERSION}}-installer-windows-msvc-x86_64.exe
          path: WebSocketReflectorX-installer-windows-msvc-x86_64.exe
      # Upload portable package
      - name: Upload Portable package
        uses: actions/upload-artifact@v4
        with:
          name: WebSocketReflectorX-${{steps.git_tag_version.outputs.BUILD_VERSION}}-portable-windows-msvc-x86_64.zip
          path: WebSocketReflectorX-portable-windows-msvc-x86_64.zip
  build-mac:
    name: "Build on MacOS"
    runs-on: macos-14
    steps:
      # Checkout repository (and submodules)
      - name: Checkout repository (and submodules)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      # Get current git tag version
      - name: Get git version
        id: git_tag_version
        run: |
          export BUILD_VERSION=$(git describe --tags --abbrev=0)
          echo "Build at version $BUILD_VERSION"
          echo "BUILD_VERSION=$BUILD_VERSION" >> $GITHUB_OUTPUT
      # Build CLI binaries
      - name: Build CLI binaries
        run: |
          rustup update stable && rustup default stable;
          cargo install cargo-bundle;
          cargo build --verbose --release --bins;
      # Build CLI binaries for x86_64
      - name: Build CLI binaries for x86_64
        run: |
          rustup target add x86_64-apple-darwin;
          cargo build --verbose --release --bins --target x86_64-apple-darwin;
      # Compress aarch64 binaries
      - name: Compress Binaries for aarch64
        run: zip -r -y -X wsrx-cli-macos-aarch64.zip target/release/wsrx
      # Compress x86_64 binaries
      - name: Compress Binaries for x86_64
        run: zip -r -y -X wsrx-cli-macos-x86_64.zip target/x86_64-apple-darwin/release/wsrx
      # Build OSX DMG app
      - name: Build DMG
        run: |
          sh deployments/macos.sh
      ## Upload cli ZIP for aarch64
      - name: Upload cli ZIP for aarch64
        uses: actions/upload-artifact@v4
        with:
          name: wsrx-cli-${{steps.git_tag_version.outputs.BUILD_VERSION}}-macos-aarch64.zip
          path: wsrx-cli-macos-aarch64.zip
      ## Upload cli ZIP for aarch64
      - name: Upload cli ZIP for x86_64
        uses: actions/upload-artifact@v4
        with:
          name: wsrx-cli-${{steps.git_tag_version.outputs.BUILD_VERSION}}-macos-x86_64.zip
          path: wsrx-cli-macos-x86_64.zip
      ## Upload application ZIP for aarch64
      - name: Upload application ZIP for x86_64
        uses: actions/upload-artifact@v4
        with:
          name: WebSocketReflectorX-${{steps.git_tag_version.outputs.BUILD_VERSION}}-macos-aarch64.app.zip
          path: target/release/bundle/osx/wsrx-desktop.app.zip
      ## Upload application DMG for aarch64
      - name: Upload application DMG for x86_64
        uses: actions/upload-artifact@v4
        with:
          name: WebSocketReflectorX-${{steps.git_tag_version.outputs.BUILD_VERSION}}-macos-aarch64.dmg
          path: wsrx-desktop.dmg
